#version 460

#define SQRT2 1.41421356237
#define PI 3.141592653589

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (std140) uniform Camera {
    mat4 view;
    mat4 proj;
    float zoom;
    float pitch;
    float yaw;
};

layout (std140) uniform Window {
    int width;
    int height;
    float aspect_ratio; 
} window;

uniform int N;

layout (std430, binding = 0) readonly buffer Input {
    // vec3 position
    // vec3 color
    // float size
    // float rotation
    float data_in[];
};

layout (std430, binding = 1) writeonly buffer Output {
    // vec4 position
    // vec4 tex coord
    // float location
    float data_out[];
};

void main() {
    if (gl_GlobalInvocationID.x >= N)
        return;
    uint idx = 8 * gl_GlobalInvocationID.x;
    vec4 position;
    position = vec4(data_in[idx], 0.0f, data_in[idx+2], 1.0f);
    position = proj * view * position;
    position.y += data_in[idx+1] / zoom;

    float size, rotation, u1, v1, u2, v2, location;
    size = data_in[idx+6];
    rotation = data_in[idx+7];

    float r, g, b;
    r = data_in[idx+3];
    g = data_in[idx+4];
    b = data_in[idx+5];

    vec2 offset;
    float drot, theta;
    drot = -rotation+yaw-PI;
    drot = atan(tan(drot) / cos(PI / 2 + pitch)) + (cos(drot) > 0 ? 0 : PI) + (size < 0 ? 0 : PI / 4);
    
    idx = 6 * 7 * gl_GlobalInvocationID.x;
    // Vertex 1 (bottom left)
    theta = drot - 3 * PI / 4;
    offset = size / zoom / SQRT2 * vec2(cos(theta) / window.aspect_ratio, sin(theta)); 
    data_out[idx++] = position.x + offset.x;
    data_out[idx++] = position.y + offset.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = r;
    data_out[idx++] = g;
    data_out[idx++] = b;
    // Vertex 2 (bottom right)
    theta = drot - PI / 4;
    offset = size / zoom / SQRT2 * vec2(cos(theta) / window.aspect_ratio, sin(theta)); 
    data_out[idx++] = position.x + offset.x;
    data_out[idx++] = position.y + offset.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = r;
    data_out[idx++] = g;
    data_out[idx++] = b;
    // Vertex 3 (top left)
    theta = drot + 3 * PI / 4;
    offset = size / zoom / SQRT2 * vec2(cos(theta) / window.aspect_ratio, sin(theta));
    data_out[idx++] = position.x + offset.x;
    data_out[idx++] = position.y + offset.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = r;
    data_out[idx++] = g;
    data_out[idx++] = b;
    // Vertex 4 (top left)
    theta = drot + 3 * PI / 4;
    offset = size / zoom / SQRT2 * vec2(cos(theta) / window.aspect_ratio, sin(theta));
    data_out[idx++] = position.x + offset.x;
    data_out[idx++] = position.y + offset.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = r;
    data_out[idx++] = g;
    data_out[idx++] = b;
    // Vertex 5 (bottom right)
    theta = drot - PI / 4;
    offset = size / zoom / SQRT2 * vec2(cos(theta) / window.aspect_ratio, sin(theta));
    data_out[idx++] = position.x + offset.x;
    data_out[idx++] = position.y + offset.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = r;
    data_out[idx++] = g;
    data_out[idx++] = b;
    // Vertex 6 (top right)
    theta = drot + PI / 4;
    offset = size / zoom / SQRT2 * vec2(cos(theta) / window.aspect_ratio, sin(theta));
    data_out[idx++] = position.x + offset.x;
    data_out[idx++] = position.y + offset.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = r;
    data_out[idx++] = g;
    data_out[idx++] = b;
}

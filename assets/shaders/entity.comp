#version 460

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (std140) uniform Matrices {
    mat4 view;
    mat4 proj;
    float zoom;
};

layout (std140) uniform Window {
    int width;
    int height;
    float aspect_ratio; 
} window;

uniform int N;

layout (std430, binding = 0) readonly buffer Input {
    float data_in[];
};

layout (std430, binding = 1) writeonly buffer Output {
    float data_out[];
};

void main() {
    uint idx = 8 * gl_GlobalInvocationID.x;
    if (idx >= N)
        return;
    vec4 position;
    position = vec4(data_in[idx], data_in[idx+1], data_in[idx+2], 1.0f);
    position = proj * view * position;
    float x = 1.0f / 2.0f / window.aspect_ratio;

    idx = 6 * 4 * gl_GlobalInvocationID.x;
    // Vertex 1
    data_out[idx++] = position.x - x / zoom;
    data_out[idx++] = position.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    // Vertex 2
    data_out[idx++] = position.x + x / zoom;
    data_out[idx++] = position.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    // Vertex 3
    data_out[idx++] = position.x - x / zoom;
    data_out[idx++] = position.y + 1.0f / zoom;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    // Vertex 4
    data_out[idx++] = position.x + x / zoom;
    data_out[idx++] = position.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    // Vertex 5
    data_out[idx++] = position.x - x / zoom;
    data_out[idx++] = position.y + 1.0f / zoom;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    // Vertex 6
    data_out[idx++] = position.x + x / zoom;
    data_out[idx++] = position.y + 1.0f / zoom;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
}

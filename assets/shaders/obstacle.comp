#version 460

layout (local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout (std140) uniform Matrices {
    mat4 view;
    mat4 proj;
    float zoom;
};

layout (std140) uniform Window {
    int width;
    int height;
    float aspect_ratio; 
} window;

uniform int N;

layout (std430, binding = 0) readonly buffer Input {
    // vec3 position
    // vec4 tex info
    // float location
    float data_in[];
};

layout (std430, binding = 1) writeonly buffer Output {
    // vec4 position
    // vec4 tex coord
    // float location
    float data_out[];
};

void main() {
    uint idx = 7 * gl_GlobalInvocationID.x;
    if (idx >= N)
        return;
    vec4 position;
    position = vec4(data_in[idx], 0.0f, data_in[idx+1], 1.0f);
    position = proj * view * position;

    float size_x, size_y, u1, v1, u2, v2, location;
    size_x = 1.0f / 2.0f / window.aspect_ratio / zoom;
    size_y = 1.0f / zoom;
    u1 = data_in[idx+2];
    v1 = data_in[idx+3];
    u2 = data_in[idx+2] + data_in[idx+4];
    v2 = data_in[idx+3] + data_in[idx+5];
    location = data_in[idx+6];

    idx = 6 * 7 * gl_GlobalInvocationID.x;
    // Vertex 1
    data_out[idx++] = position.x - size_x;
    data_out[idx++] = position.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = u1;
    data_out[idx++] = v2;
    data_out[idx++] = location;
    // Vertex 2
    data_out[idx++] = position.x + size_x;
    data_out[idx++] = position.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = u2;
    data_out[idx++] = v2;
    data_out[idx++] = location;
    // Vertex 3
    data_out[idx++] = position.x - size_x;
    data_out[idx++] = position.y + size_y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = u1;
    data_out[idx++] = v1;
    data_out[idx++] = location;
    // Vertex 4
    data_out[idx++] = position.x - size_x;
    data_out[idx++] = position.y + size_y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = u1;
    data_out[idx++] = v1;
    data_out[idx++] = location;
    // Vertex 5
    data_out[idx++] = position.x + size_x;
    data_out[idx++] = position.y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = u2;
    data_out[idx++] = v2;
    data_out[idx++] = location;
    // Vertex 6
    data_out[idx++] = position.x + size_x;
    data_out[idx++] = position.y + size_y;
    data_out[idx++] = position.z;
    data_out[idx++] = position.w;
    data_out[idx++] = u2;
    data_out[idx++] = v1;
    data_out[idx++] = location;
}
